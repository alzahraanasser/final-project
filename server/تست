import express from "express";
import mongoose from "mongoose";
import cors from "cors";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import dotenv from "dotenv";
import UserModel from "./Models/UserModel.js";
import authMiddleware from "./Middleware/authMiddleware.js";
import { createUser } from "./Utils/UserUtils.js";
import HardLevelAnswer from "./Models/HardLevelAnswer.js";




dotenv.config();
const app = express();
app.use(express.json());
app.use(cors());
const router = express.Router();

// Connect to MongoDB
mongoose.connect(
  `mongodb+srv://${process.env.MONGO_USERNAME}:${process.env.MONGO_PASSWORD}@studentcal.btrkf.mongodb.net/${process.env.MONGO_DATABASE}?retryWrites=true&w=majority&appName=StudentCal`,
  {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  }
);

// ✅ Register User Route
app.post("/registerUser", async (req, res) => {
  try {
    const { name, email, password } = req.body;
    const existingUser = await UserModel.findOne({ email });
    if (existingUser) return res.status(400).json({ msg: "User already exists" });

    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new UserModel({ name, email, password: hashedPassword });
    await user.save();

    res.status(201).json({ user, msg: "User registered successfully" });
  } catch (error) {
    res.status(500).json({ msg: "Server error" });
  }
});

// ✅ Login User Route
app.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await UserModel.findOne({ email });
    if (!user) return res.status(400).json({ msg: "User not found" });

    // ⛔ تحقق إذا الحساب موقوف
    if (!user.isActive) {
      return res.status(403).json({ msg: "This account has been deactivated." });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ msg: "Incorrect password" });

    // ✅ نضيف الدور داخل التوكن
    const token = jwt.sign(
      { id: user._id, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    res.status(200).json({ user, token, msg: "Login successful" });
  } catch (error) {
    res.status(500).json({ msg: "Server error" });
  }
});



// ✅ Protected Route Example
app.get("/profile", authMiddleware, (req, res) => {
  res.json({ msg: "Protected route accessed", user: req.user });
});


//Admin Route
app.post("/admin/createUser", authMiddleware, async (req, res) => {
  try {
    if (req.user.role !== "admin") return res.status(403).json({ msg: "Unauthorized" });

    const { name, email, password, role } = req.body;
    if (!["teacher", "learner"].includes(role)) return res.status(400).json({ msg: "Invalid role" });

    const existingUser = await UserModel.findOne({ email });
    if (existingUser) return res.status(400).json({ msg: "User already exists" });

    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new UserModel({ name, email, password: hashedPassword, role });
    await user.save();

    res.status(201).json({ msg: "User created by admin", user: { name, email, role } });
  } catch (error) {
    res.status(500).json({ msg: "Server error" });
  }
});


//show all users for admin route
app.get("/admin/users", authMiddleware, async (req, res) => {
  try {
    if (req.user.role !== "admin") return res.status(403).json({ msg: "Access denied" });

    const users = await UserModel.find({}, "-password"); // استثني الباسورد
    res.json(users);
  } catch (error) {
    res.status(500).json({ msg: "Server error" });
  }
});


// ✅ Route لتعطيل المستخدم
app.patch("/admin/deactivate-user/:id", authMiddleware, async (req, res) => {
  try {
    if (req.user.role !== "admin") return res.status(403).json({ msg: "Unauthorized" });

    const userId = req.params.id;

    const updatedUser = await UserModel.findByIdAndUpdate(
      userId,
      { isActive: false },
      { new: true }
    );

    if (!updatedUser) return res.status(404).json({ msg: "User not found" });

    res.json({ msg: "User deactivated successfully", user: updatedUser });
  } catch (error) {
    res.status(500).json({ msg: "Server error" });
  }
});


// تحديث بيانات المستخدم
app.put("/update-profile", authMiddleware, async (req, res) => {
  const { name, email } = req.body;
  const updatedUser = await UserModel.findByIdAndUpdate(
    req.user.id,
    { name, email },
    { new: true, runValidators: true }
  ).select("-password"); // لا نرجّع الباسورد

  res.json({ msg: "Profile updated", user: updatedUser });
});

// تحديث كلمة المرور
app.put("/update-password", authMiddleware, async (req, res) => {
  const { oldPassword, newPassword, confirmNewPassword } = req.body;
  const userId = req.user.id; // الحصول على ID المستخدم من التوكن

  try {
    const user = await UserModel.findById(userId);

    if (!user) return res.status(404).json({ msg: "User not found" });

    // تحقق من كلمة المرور القديمة
    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch) return res.status(400).json({ msg: "Old password is incorrect" });

    // تحقق من تطابق كلمة المرور الجديدة
    if (newPassword !== confirmNewPassword) {
      return res.status(400).json({ msg: "Passwords don't match" });
    }

    // تحديث كلمة المرور الجديدة
    const hashedNewPassword = await bcrypt.hash(newPassword, 10);

    user.password = hashedNewPassword;

    await user.save();

    res.status(200).json({ msg: "Password updated successfully" });
  } catch (error) {
    res.status(500).json({ msg: "Server error" });
  }
});


// مسار لتحميل معلومات المستخدم بناءً على الـ token
app.get("/user", authMiddleware, (req, res) => {
  res.json({ user: req.user }); // بيانات المستخدم ستكون متوفرة من خلال الـ token
});


// Backend API route for logout
app.post("/logout", (req, res) => {
  res.status(200).json({ msg: "Logged out successfully" });
});



// Admin Route لإنشاء مستخدم جديد
app.post("/admin/createUser", authMiddleware, async (req, res) => {
  try {
    if (req.user.role !== "admin") {
      return res.status(403).json({ msg: "Unauthorized" });
    }

    const { name, role, phone } = req.body; // إضافة رقم الهاتف إذا كان متاحًا
    const newUser = await createUser(name, role, phone); // إنشاء المستخدم مع رقم الهاتف إن كان موجودًا

    res.status(201).json({ msg: "User created successfully", email: newUser.email, role: newUser.role });
  } catch (error) {
    res.status(500).json({ msg: "Error creating user" });
  }
});



// Route لحفظ إجابة مستوى صعب
app.post("/hardlevel-answers", authMiddleware, async (req, res) => {
  try {
    const { sentence } = req.body;

    if (!sentence) {
      return res.status(400).json({ msg: "يرجى كتابة الجملة" });
    }

    const newAnswer = new HardLevelAnswer({
      email: req.user.email, // الإيميل من التوكن
      sentence,
    });

    await newAnswer.save();

    res.status(201).json({ msg: "تم حفظ إجابتك بنجاح" });
  } catch (error) {
    res.status(500).json({ msg: "حدث خطأ أثناء الحفظ" });
  }
});



// عرض جميع إجابات مستوى صعب (للمعلم)
app.get("/hardlevel-answers", authMiddleware, async (req, res) => {
  try {
    if (req.user.role !== "teacher") {
      return res.status(403).json({ msg: "Unauthorized" });
    }

    const answers = await HardLevelAnswer.find().sort({ submittedAt: -1 });

    res.json(answers);
  } catch (error) {
    res.status(500).json({ msg: "حدث خطأ أثناء التحميل" });
  }
});











app.listen(5000, () => console.log("Server running on port 5000"));